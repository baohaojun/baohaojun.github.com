*  微硬操作系统 CAN 和以太网在 X86 Qemu 下 bring-up 笔记

最近因为在理想汽车的工作需要，开始研究微硬操作系统，一种开源的硬实时的微内核操作系统（因为项目保密需要，暂时将其简称为微（内核）硬（实时）操作系统，英文协音 WeIn-Os）。

目前处于刚起步的阶段，有很多挑战，几乎一切都需要从头开始（WeIn-Os 本身前景非常看好，但确实还没有形成成熟的开发者社区）。

主要工作方向是与之相关的开发工具，其中包括在 Qemu 上为它开发像安卓 AOSP 项目的模拟器类似的系统仿真功能，只不过不是为了手机开发，而是为了汽车 ECU 控制器的开发。

根据我对 ECU 的粗浅的理解，我认为在目前这个阶段，我可以切入着手解决的是两个外设的通讯能力，一个是 CAN 总线通讯，另一个是以太网 TCP/IP 通讯。

因此我给自己定了两个小目标，就是要把这两种通讯能力加到 WeIn-Os 支持的某款 Qemu 虚拟设备上。

** CAN 总线通讯

在 2013 年的时候，有一个中国学生通过 GSOC 项目，已经给 Qemu 实现了 CAN 设备的虚拟能力，我需要做的，就是把它在 WeIn-Os 里点亮。

具体的方案是：

1. 在 Linux Host 上用 vCAN 虚拟一个 CAN 总线
2. 在 Qemu 启动的时候，添加如下参数：

   #+begin_src python
     qemu_args += [
         "-object", "CAN-bus,id=CANbus0-bus",
         "-object",
         "CAN-host-socketCAN,if=CAN0,CANbus=CANbus0-bus,id=CANbus0-socketCAN",
         "-device",
         "ctuCAN_pci,CANbus0=CANbus0-bus,CANbus1=CANbus0-bus",
     ]
   #+end_src
3. 在 Qemu Linux 系统下点亮 ctuCAN 通讯

   CtuCAN 是 CTU（捷克工业大学）用 FPGA 设计实现的一个软硬件开源的 CAN 控制器，提供了 [[https://gitlab.fel.cvut.cz/canbus/ctucanfd_ip_core.git][参考源码（内含 TeX 文档，需要自己编译成 PDF）]]，稍微修改之后，就能在 Qemu Linux 虚拟机内使用，对我学习 CAN 设备提供了非常大的帮助。

   点亮过程中有一个非常坑的地方，就是一开始我只能收 CAN 数据，不能发 CAN 数据。后来自己编译了 Qemu，然后用 gdb 对 Qemu 的 ctuCAN 源码进行 debug，发现在发送数据的时候相关的代码逻辑是能运行起来的，但是最后有一个优先级判断的地方会有一个 Bug, 导致数据发不出来。作为一种 work-around，在 CAN 设备初始化的时候，将通道 0 的 priority 从 0 改成 1，然后就能正确发送了。

   因为 ctuCAN 是基于 PCI 总线的，而 PCI 总线编程比较简单，在 github 上有一个 [[https://github.com/billfarrow/pcimem/][pcimem]] 工具，即使对 Kernel 不太熟，也可以在 userspace 下操作、熟悉 PCI 设备。

4. 将 CtuCAN 的 userspace 测试程序移植到 WeIn-Os 上

   过程比较简单，魔改了一个 WeIn-Os 现有的参考范例。

   然后就在 WeIn-Os 上可以收、发 CAN 数据了，[耶]。

** 点亮 TCP/IP

这里有一个非常关键的问题，就是需要在跟 CAN 通讯相同的一款 Qemu 虚拟设备上，点亮 TCP/IP，获得同时支持 CAN 和 TCP/IP 的能力，结果才有意义（否则设备 A 只有 CAN 而没有 TCP/IP 通讯，另一个设备 B 只有 TCP/IP 而没有 CAN，对我们没有什么价值，现在汽车电子元器件发展的一大方向就是要通过聚合来节省成本，分开的通讯能力就呵呵了）。

一番研究之后，我决定使用 Qemu 的 X86 虚拟机，因为只有它同时满足两个条件：

1. 自带 PCI 总线，可以支持 CtuCAN 虚拟。

2. WeIn-Os 已经提供了 Ethernet+Tcp 的移植范例，可以大大降低点亮的工作量和难度

   这里最大的问题是这个 sample 是基于 Intel NUC 真机点亮的，并不支持 qemu simulate。

过程可以说非常曲折，让我一度怀疑这个目标的可行性，但幸运的是，最后还是点亮了。这里简要记录一下过程。

1. 自己编译一个最小的 Linux 内核 + 用 busybox 编译一个最小的 initrd，运行在 qemu 上，用于对比测试

   确认 qemu 默认虚拟的 e1000e 型号的网卡，在虚拟 Linux 下是可以正常工作的，WeIn-Os 的 X68 Ethernet+Tcp 用的也恰好是这块网卡。

2. 接下来就是各种 Debug，为什么这里有问题，那里不工作[捂脸]，还好，解决这些问题的过程中，还是能学到很多东西。

3. 编译不过问题

   没错，可能因为 sample 源码重要性不高，很久没有人维护了，导致编译也通不过

4. 运行出错问题（SytemFault）

   这里有很多原因，比如 sample 实现里使用了 Intel 的 IOMMU 硬件特性（下面还会讲到这个 IOMMU），然后在 WeIn-Os 里必须在编译的时候加上 IOMMU 的支持（没错，不加的话编译居然也不会报错，这点对开发者不够友好），以及在 Qemu 运行的时候也需要加上 IOMMU 的虚拟设备。

5. 程序运行起来了，IP 地址分配下去了，socket 也建立了，但是，没法收发数据。。。

这是一块真正的硬骨头，我花了很多时间跟它搏斗，慢慢地调试并最终解决了这个问题。

*** 硬件参数配置问题

首先是硬件参数的配置（主要是内存地址和中断），因为 WeIn-Os 是嵌入式实时的系统，比较原始，虽然是 X86 平台，硬件参数目前是需要自己配置的（e1000e 网卡也是一个 PCI 设备，在 Linux 下的话，参数都是可以自检，不用配置的）。

因为对硬件和平台都不是很熟，一开始配的时候需要特别小心，配错的话就傻了，完全没有办法继续下去，只能不停地试错，多试几次。

在基本确定自己应该把参数配得没问题了之后，还是没有数据[捂脸]，咋整。这时候就需要用上之前准备的最小 Linux 对比系统了。

*** MSI 和 Legacy 中断

一对比发现参数配置还是不对，在 Linux 这边，procfs 里有一个 =/proc/interrupts= 文件，它能告诉你中断相关的信息，我打开一看，在 Linux 下 eth0 相关的有 3 个中断，而 WeIn-Os 下只让我配了一个中断。稍微 Google 了一下，发现这是 PCI 的一种中断优化机制，叫 MSI（Message Signal Interrupt，消息信号中断）。

解决的方案是修改 Qemu 的源码，将 e1000e 的 msi/msix 的初始化给跳过，后续它就会使用传统的中断机制了，用最小 Linux 系统验证一下，这样改了之后，网络还是继续能工作的。

*** IOMMU 和 DMA

改完以后，信心指数满满，这下应该肯定没有问题了，WeIn-Os 下应该能收发 TCP 数据了吧？然而并没有。

接下来就又是一顿疯狂的 GDB WeIn-Os/Linux 对比调试 + 文档恶补。

首先，通过 GDB 很快就能确定数据收发不上来，是因为存储数据的内存映射有问题，用的读写方法都不一致，在 Linux 下使用的是 memcpy 直接读取，在 WeIn-Os 下居然用 device i/o 读取设备端口的方式。

由此学习了一下 qemu 对内存地址空间虚拟管理的一些知识，了解了 AddressSpace、FlatView、MemoryRegion 等数据结构。然而并没有什么用，这几个数据结构调来调去，总也调不出来想要的内存映射。

然后在 WeIn-Os 源码里对 DMA 的处理，发现有一个 dma_pin 函数，一般是返回内存的物理地址，但是在这个 sample 里，它返回的却是内存的虚拟地址，这肯定是不行的，在 qemu 代码里，只能通过 guest 的物理地址得到 host 的存储地址，传给它一个 guest 的虚拟地址，qemu 怎么算得出来嘛。这明显不对，所以我直接就把 sample 里的 dma_pin 改为返回物理地址，然后又信心满满地试了一下，嗯，还是不行[打脸]。

到了这里，我基本上已经快崩溃了，这也太难了。

最后终于想起来，这里面有一个很大的差异，就是 Linux 下应该是没有使用 IOMMU，而 WeIn-Os 下不知道当初怎么想的，选择使用了 IOMMU。IOMMU 对 DMA 技术本身来说，并不是必须的，它更多的是用在 Intel 的 VT-d 这个增强虚拟化技术上。另外，Qemu 对 IOMMU 的支持并不完善，使用的时候有很多限制。

抱着最后一丝希望，搞不定我就放弃了的念头，草草地修改了一下 sample 源码里的 DMA 映射创建方式，将 IOMMU-DMA 改成原始的 DMA，然后——

一把就过了！能收发 TCP/IP 数据了！

😆😆😆😆

最后，如果你对工具开发感兴趣的话，欢迎给我发简历，我在招人，有合适的朋友的话，也欢迎推荐[抱拳感谢]。

作为一个工具爱好者，我开发过很多小工具，比如：

- 大型项目源码搜索引擎 beagrep，一秒钟搜索 10G 安卓源码：https://github.com/baohaojun/beagrep
- 自动化脚本编程操作安卓手机，大拇指的拯救者小扳手：https://github.com/baohaojun/Wrench/
- 以及曾经拍过一个介绍 Linux 下各种工具使用的视频：https://www.bilibili.com/video/av3376647/

（理想汽车正在招人，不是工具开发方向也没关系，一样可以给我发简历帮你推荐：https://www.lixiang.com/job.html）

WeIn-OS —— 欢迎大家（We）加入（In）来一起搞 OS😊。
